# Default values for medifor-ui-helm-chart
# Declare variables to be passed into your templates.

###############################################################
# The namespace that will contain the medifor resources
#
namespace: medifor

############################################################################################
# Flag whethere or not the system is being deployed on remote instance without internet access
# Affects how containers are pulled for pods
#
remotedeploy: false

###################################
# Flag to enable/disable Prometheus
# If enable then helm will create template for analytic services and service monitors
#
prometheus:
  enabled: false

###################################
#   Replica counts for various pods
#
replicas:
  ui: 1
  fusion: 1
  analytic: 1

###################################################
#   The list of analytics to create deployments for
#
#   id - ID of the analytic
#   name - Name of the analytic
#   description - Description of the analytic's function
#   container - URL to the docker image for this analytic
#   version - Version of the analytic
#   media - The type or types of media that the analytic r*uns on. Must follow the given format
#   resource - The resource requests and limits to be used by the analytic in the cluster
#
analytics:
  - id: ela-base
    name: Error Level Analysis
    description: Identifying areas within an image that are at different compression levels
    container: ghcr.io/mediaforensics/packages/ela:latest
    version: prod2020-03
    media: ["IMAGE", "VIDEO"]
    resources:
      requests:
        cpu: .125
        mem: 100Mi
        gpu: 0
      limits:
        cpu: .25
        mem: 200Mi
        gpu: 0
  - id: exif
    name: Baseline Analytic Exif
    description: Baseline Analytic Exif Description
    container: ghcr.io/mediaforensics/packages/exif:latest
    version: prod2020-03
    media: ["IMAGE"]
    resources:
      requests:
        cpu: .125
        mem: 100Mi
        gpu: 0
      limits:
        cpu: .25
        mem: 200Mi
        gpu: 0

##########################################################
#   The list of fusion analytics to create deployments for
#
#   id - ID of the fusion analytic
#   name - Name of the fusion analytic
#   description - Description of the fusion analytic's function
#   container - URL to the docker image for this fusion analytic
#   version - Version of the fusion analytic
#   media - The type or types of media that the fusion analytic runs on. Must follow the given format
#   resource - The resource requests and limits to be used by the fusion analytic in the cluster
#
fusers:
  - id: ta2avg
    name: Image Averaging Fusion
    description: Averages all analytic input scores available to calculate score
    container: ghcr.io/mediaforensics/packages/ta2avg:latest
    version: prod2020-03
    media: ["FUSION_IMAGE", "FUSION_VIDEO"]
    resources:
      requests:
        cpu: .1
        mem: 100Mi
        gpu: 0
      limits:
        cpu: .2
        mem: 200Mi
        gpu: 0

##################################################################
#   The volume mount paths for the data from the analytic containers
#
analyticmounts:
  input:
    external: /medifor/input
    internal: /mnt/medifor/input
  output:
    external: /medifor/output
    internal: /mnt/medifor/output

####################################################################################
#   The analytic worker that will be use for all analytic and analytic workflow pods
#
#   id - ID for the analytic worker
#   version - Version for the analytic worker which also serves as the docker image tag
#   config_mount - Location in the analyticworker container where the analytic configuration file will be mounted
#   container - URL to the docker image for the analytic worker
#   ports - Ports the analytic worker container will listen on
#
analyticworker:
  id: analyticworkflow
  version: develop
  config_mount: /mnt/config/analytic_config.json
  container: ghcr.io/mediaforensics/packages/analyticworker:latest
  ports:
    grpc:
      port_number: 50051
    http:
      port_number: 50052
    prometheus:
      port_number: 2112

###################################################################
#   The values and environment variables for the medifor-ui container
#
#   name - Name for the UI resource
#   container - URL for the docker image for the UI container
#   port - Port that the UI container will expose inside the pod
#   env.CONTAINER_ROOT - Directory where the UI container stores static upload media and output from analytics
#   env.WORKFLOW_HOST - Name of the analytic workflow host
#   env.WORKFLOW_PORT - Port that the analyticworkflow resource will listen on
#   env.CACHE_TTL_SECONDS - Number of seconds that the UI will cache the analytic list response from the pipeline
#   env.UI_ENABLE_GROUPS - Flag to turn on/off the grouping feature within the UI
#   env.UI.DEFAULT_FUSER_ID - ID for the default fusion model to be used in the UI, if left empty then first fuser in the list will be chosen
#   env.UI_UNKNOWN_USERS - 'deny/allow' flag on how to handle unknown system users when grouping is enabled
#   env.UI_GROUP_PREFIX - Prefix used to denote user groups in the headers
#   env.UI_USER_TAG_PREFIX - Prefix for user tags
#   env.UI_GROUP_TAG_PREFIX - Prefix from group tags
#   env.UI_TAG_PREFIX_FLAG - Prefix appended to all user and group tags - '__user' '__group'

ui:
  name: medifor-ui
  container: ghcr.io/mediaforensics/packages/medifor-ui:latest
  port: 3000
  service:
    type: NodePort
    nodePort: 30000
  env:
    CONTAINER_ROOT: "/medifor"
    WORKFLOW_HOST: "analyticworkflow"
    WORKFLOW_PORT: "50051"
    PORT: "3000"
    CACHE_TTL_SECONDS: 600
    UI_ENABLE_GROUPS: false
    UI_ENABLE_DELETE: true
    UI_DEFAULT_FUSER_ID: ""
    UI_UNKNOWN_USERS: "deny"
    UI_GROUP_PREFIX: "medifor-uigrp-"
    UI_USER_TAG_PREFIX: "user"
    UI_GROUP_TAG_PREFIX: "group"
    UI_TAG_PREFIX_FLAG: "__"

#################################
# Values for the postgres resource
#
postgres:
  database: postgres
  username: postgres
  password: postgres
  address: pgmedifor
  port: 5432

################################
# Values for the Entroq resource
#
entroq:
  ports:
    grpc: 37706
    metrics: 8080

##################################################
# Configurable condition for the autoscaler templates
#
autoscaler:
  enabled: false

###################################
# Default Persistence Configuration
# The medifor-data-pvc and the postgres-pvc will use the cluster's default storage class if
# `storageClass:` is undefined
#
# Otherwise you can create your own custom storage class and define it as
# `storageClass: <customStorageClassName>`
#
persistence:
  medifor:
    # storageClass:
    accessMode: ReadWriteMany
    size: 2Gi
  postgres:
    # storageClass:
    accessMode: ReadWriteOnce
    size: 5Gi
